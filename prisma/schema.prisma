generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  role         Role

  // Work requests created by the user (Council)
  workRequests WorkRequest[] @relation("UserWorkRequests")

  // Bids placed by the expert
  bids         Bid[] @relation("UserBids")

  // Invites sent by the Council
  sentInvites  Invite[] @relation("CouncilInvites")

  // Invites received by an expert
  receivedInvites Invite[] @relation("ExpertInvites")
}

model WorkRequest {
  id          String    @id @default(uuid())
  title       String
  budget      String
  description String
  category    String
  fileURL     String?
  userId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deadline    DateTime
  durationDays Int?     // Optional: Used for calculating deadline
  

  // Fields for Accept Bid Flow
  status         WorkRequestStatus @default(OPEN)
  acceptedBidId  String?  @unique
  acceptedBid    Bid?              @relation("AcceptedBid", fields: [acceptedBidId], references: [id])


  // Relationships
  // Relation to User (Council)
  user        User? @relation("UserWorkRequests", fields: [userId], references: [id], onDelete: Cascade)

  // Bids placed on this work request
  bids        Bid[] @relation("WorkRequestBids")

  // Invites related to this work request
  invites     Invite[] @relation("WorkRequestInvites")
}

// model Bid {
//   id            String   @id @default(cuid())
//   userId        String
//   workRequestId String
//   amount        Float
//   message       String?
//   createdAt     DateTime @default(now())

//   // Relations
//   user        User        @relation("UserBids", fields: [userId], references: [id], onDelete: Cascade)
//   workRequest WorkRequest @relation("WorkRequestBids", fields: [workRequestId], references: [id], onDelete: Cascade)

//   // Backward relation from WorkRequest
//   acceptedIn  WorkRequest? @relation("AcceptedBid")
// }

model Bid {
  id            String   @id @default(cuid())
  userId        String
  workRequestId String
  amount        Float
  message       String?
  createdAt     DateTime @default(now())

  // ⬇️ NEW: Submission fields
  submissionMessage String?
  submissionFileURL String?
  submittedAt       DateTime?

  // Relations
  user        User        @relation("UserBids", fields: [userId], references: [id], onDelete: Cascade)
  workRequest WorkRequest @relation("WorkRequestBids", fields: [workRequestId], references: [id], onDelete: Cascade)

  // Backward relation from WorkRequest
  acceptedIn  WorkRequest? @relation("AcceptedBid")
}


model Invite {
  id            String   @id @default(uuid())
  message       String?
  status        InviteStatus @default(PENDING)
  councilId     String
  expertId      String
  workRequestId String
  createdAt     DateTime @default(now())

  // Relations
  council     User        @relation("CouncilInvites", fields: [councilId], references: [id], onDelete: Cascade)
  expert      User        @relation("ExpertInvites", fields: [expertId], references: [id], onDelete: Cascade)
  workRequest WorkRequest @relation("WorkRequestInvites", fields: [workRequestId], references: [id], onDelete: Cascade)
}

enum Role {
  COUNCIL
  EXPERT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Enum for WorkRequest status
enum WorkRequestStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}
