generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  role         Role

  // Work requests created by the user (Council)
  workRequests WorkRequest[] @relation("UserWorkRequests")

  // Bids placed by the expert
  bids         Bid[] @relation("UserBids")

  // Invites sent by the Council
  sentInvites  Invite[] @relation("CouncilInvites")

  // Invites received by an expert
  receivedInvites Invite[] @relation("ExpertInvites")

  // Messages sent by the user (Council or Expert)
  submissionMessages SubmissionMessage[] @relation("UserMessages")

  // notification Notification[]
  notifications Notification[] @relation("UserNotifications")

  councilContracts Contract[] @relation("CouncilContracts")

  expertContracts  Contract[] @relation("ExpertContracts") 
}

model WorkRequest {
  id          String    @id @default(uuid())
  title       String
  budget      String
  description String
  category    String
  fileURL     String?
  userId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deadline    DateTime
  durationDays Int?     // Optional: Used for calculating deadline
  

  // Fields for Accept Bid Flow
  status         WorkRequestStatus @default(OPEN)
  acceptedBidId  String?  @unique
  acceptedBid    Bid?              @relation("AcceptedBid", fields: [acceptedBidId], references: [id])


  // Relationships
  // Relation to User (Council)
  user        User? @relation("UserWorkRequests", fields: [userId], references: [id], onDelete: Cascade)

  // Bids placed on this work request
  bids        Bid[] @relation("WorkRequestBids")

  // Invites related to this work request
  invites     Invite[] @relation("WorkRequestInvites")

  contract    Contract? @relation("WorkRequestContract") 
}

// This model represents the bids placed by experts on work requests
// It includes a one-to-one relationship with the Submission model
model Bid {
  id            String   @id @default(cuid())
  userId        String
  workRequestId String
  amount        Float
  message       String?
  createdAt     DateTime @default(now())

  // Relations
  user        User        @relation("UserBids", fields: [userId], references: [id], onDelete: Cascade)
  workRequest WorkRequest @relation("WorkRequestBids", fields: [workRequestId], references: [id], onDelete: Cascade)

  acceptedIn  WorkRequest? @relation("AcceptedBid")

  submission  Submission?   // âœ… One-to-one submission

  contract Contract? @relation("ContractAcceptedBid")

}


model Submission {
  id           String   @id @default(cuid())
  message      String
  fileURL      String
  fileName     String
  submittedAt  DateTime @default(now())

  bidId        String   @unique
  bid          Bid      @relation(fields: [bidId], references: [id], onDelete: Cascade)

  messages     SubmissionMessage[] @relation("SubmissionMessages")
}


model SubmissionMessage {
  id             String   @id @default(cuid())
  submissionId   String
  senderId       String
  senderRole     Role
  content        String
  fileURL        String?
  createdAt      DateTime @default(now())

  submission     Submission @relation("SubmissionMessages", fields: [submissionId], references: [id])
  sender         User       @relation("UserMessages", fields: [senderId], references: [id])
}


// This model represents the invites sent by councils to experts
// It includes a one-to-one relationship with the WorkRequest model
model Invite {
  id            String   @id @default(uuid())
  message       String?
  status        InviteStatus @default(PENDING)
  councilId     String
  expertId      String
  workRequestId String
  createdAt     DateTime @default(now())

  // Relations
  council     User        @relation("CouncilInvites", fields: [councilId], references: [id], onDelete: Cascade)
  expert      User        @relation("ExpertInvites", fields: [expertId], references: [id], onDelete: Cascade)
  workRequest WorkRequest @relation("WorkRequestInvites", fields: [workRequestId], references: [id], onDelete: Cascade)
}

enum RelatedType {
  WORK_REQUEST
  CONTRACT
}


model Notification {
  id           String   @id @default(cuid())
  userId       String
  // type         String   
  type         NotificationType // "NEW_BID", "BID_ACCEPTED", "SUBMISSION", "FEEDBACK", "MESSAGE"
  message      String
  relatedId    String   // ID of the work request or bid
  relatedTitle String   // Title of the work request
  relatedType  RelatedType   // "WORK_REQUEST" or "CONTRACT"
  link         String?  // Optional deep link
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())

  // Relations
  // user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  user         User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}


model Contract {
  id              String         @id @default(uuid())
  workRequestId   String         @unique // A contract is tied to a specific work request
  workRequest     WorkRequest    @relation("WorkRequestContract", fields: [workRequestId], references: [id])
  acceptedBidId   String         @unique // Reference to the bid that was accepted to form this contract
  acceptedBid     Bid            @relation("ContractAcceptedBid", fields: [acceptedBidId], references: [id])
  councilId       String
  council         User           @relation("CouncilContracts", fields: [councilId], references: [id])
  expertId        String
  expert          User           @relation("ExpertContracts", fields: [expertId], references: [id])
  startDate       DateTime       @default(now())
  endDate         DateTime       // Expected completion date or actual completion date
  finalAmount     Float          // The agreed-upon amount for the contract
  status          ContractStatus @default(ACTIVE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}


enum Role {
  COUNCIL
  EXPERT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Enum for WorkRequest status
enum WorkRequestStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

// Enum for Submission feedback status
enum FeedbackStatus {
  CHANGES_REQUESTED     // Council requested corrections
  APPROVED    // Council accepted the submission
  REJECTED    // Council permanently rejected the submission
}

enum NotificationType {
  NEW_BID
  BID_ACCEPTED
  SUBMISSION
  FEEDBACK
  MESSAGE
  INVITE
}
